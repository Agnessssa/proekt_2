import telebot
import random
import conf
from pymorphy2 import MorphAnalyzer
from nltk import word_tokenize
import kto_ubil_marka

bot = telebot.TeleBot(conf.TOKEN)
morph = MorphAnalyzer()
bot.remove_webhook()

good_morning_messages = {
    'en': [
        "Good morning! Have a bright and fulfilling day!",
        "Good morning! May this day be filled with joy and success!",
        "Morning is the start of new possibilities. Wishing you the best of this day!",
        "I wish you a wonderful day!"
    ],
    'ru': [
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç —Å–∞–º—ã–º –ª—É—á—à–∏–º!",
        "–£—Ç—Ä–æ - –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π. –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç —è—Ä–∫–∏–º –∏ —É–¥–∞—á–Ω—ã–º!",
        "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º! –ñ–µ–ª–∞—é —É–ª—ã–±–æ–∫ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
        "–ñ–µ–ª–∞—é —Å–∞–º–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –¥–Ω—è!"
    ],
    'de': [
        "Guten Morgen! M√∂ge dieser Tag der Beste sein!",
        "Der Morgen ist die Zeit f√ºr neue Anf√§nge. Lassen Sie den Tag hell und erfolgreich sein!",
        "Guten Morgen! Ich w√ºnsche ein L√§cheln und gute Laune!",
        "Ich w√ºnsche dir einen sch√∂nen Tag!"
    ],
    'it': [
        "Buongiorno! Possa questo giorno essere il migliore!",
        "La mattina √® un momento per nuovi inizi. Possa la giornata essere luminosa e di successo!",
        "Buongiorno! Ti auguro sorrisi e buon umore!",
        "Ti auguro una bella giornata!"
    ]
}

def lemmatize_sentence(sentence):
    token_words = word_tokenize(sentence)
    lemmatized_words = [morph.parse(word)[0].normal_form for word in token_words]
    lemmatized_sentence = ' '.join(lemmatized_words)
    return lemmatized_sentence

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "\t –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! Hallo! Ciao! Hello! "
                                      "\n\n\t –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã –ø—Ä–æ –≤—Å–µ —Ö–æ—Ä–æ—à–µ–µ –¥–ª—è —É—Å–ø–æ–∫–æ–µ–Ω–∏—è –Ω–µ—Ä–≤–æ–≤ –∏ –∂–µ–ª–∞—Ç—å –≤–∞–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –¥–Ω—è –Ω–∞ "
                                      "—Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö! –ê –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –¥–∞–∂–µ —Å–¥–µ–ª–∞–µ—Ç –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞"
                                      " –∏ –Ω–∞–ø–∏—à–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã) "
                                      "\n\n\t ‚úçÔ∏è‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /language –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π (–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)." 
                                      "\n\n\t ‚úçÔ∏è‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /new –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ –≤—Å–µ —Ö–æ—Ä–æ—à–µ–µ –∏ –¥–æ–±—Ä–æ–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.")

@bot.message_handler(commands=['language'])
def good_morning(message):
    language_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    language_keyboard.add('üá¨üáß English', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá©üá™ Deutsch', 'üáÆüáπ Italian')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_keyboard)

@bot.message_handler(func=lambda message: message.text == 'üá¨üáß English')
def send_english_message(message):
    morning_message = random.choice(good_morning_messages['en'])
    bot.send_message(message.chat.id, morning_message)
    lemmatized_message = lemmatize_sentence(morning_message)
    bot.send_message(message.chat.id, lemmatized_message)
    words = morning_message.split()
    for word in words:
        parsed_word = morph.parse(word)[0]
        analyzed_result = f'–°–ª–æ–≤–æ: {word}\n' \
                          f'–ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: {parsed_word.normal_form}\n' \
                          f'–ß–∞—Å—Ç—å —Ä–µ—á–∏: {parsed_word.tag.POS}\n' \
                          f'–ü–∞–¥–µ–∂: {parsed_word.tag.case}\n' \
                          f'–†–æ–¥: {parsed_word.tag.gender}\n' \
                          f'–ß–∏—Å–ª–æ: {parsed_word.tag.number}\n'
        bot.send_message(message.chat.id, analyzed_result)

@bot.message_handler(func=lambda message: message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π')
def send_russian_message(message):
    morning_message = random.choice(good_morning_messages['ru'])
    bot.send_message(message.chat.id, morning_message)
    lemmatized_message = lemmatize_sentence(morning_message)
    bot.send_message(message.chat.id, lemmatized_message)
    words = morning_message.split()
    for word in words:
        parsed_word = morph.parse(word)[0]
        analyzed_result = f'–°–ª–æ–≤–æ: {word}\n' \
                          f'–ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: {parsed_word.normal_form}\n' \
                          f'–ß–∞—Å—Ç—å —Ä–µ—á–∏: {parsed_word.tag.POS}\n' \
                          f'–ü–∞–¥–µ–∂: {parsed_word.tag.case}\n' \
                          f'–†–æ–¥: {parsed_word.tag.gender}\n' \
                          f'–ß–∏—Å–ª–æ: {parsed_word.tag.number}\n'
        bot.send_message(message.chat.id, analyzed_result)

@bot.message_handler(func=lambda message: message.text == 'üáÆüáπ Italian')
def send_russian_message(message):
    morning_message = random.choice(good_morning_messages['it'])
    bot.send_message(message.chat.id, morning_message)


@bot.message_handler(func=lambda message: message.text == 'üá©üá™ Deutsch')
def send_russian_message(message):
    morning_message = random.choice(good_morning_messages['de'])
    bot.send_message(message.chat.id, morning_message)

@bot.message_handler(commands=['new'])
def send_len(message):
    bot.send_message(message.chat.id, kto_ubil_marka.m.make_short_sentence(100))

if __name__ == '__main__':
    bot.polling(none_stop=True)